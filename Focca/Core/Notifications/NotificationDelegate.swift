import Foundation
import UserNotifications
import UIKit

/// Delegate para gerenciar notificaÃ§Ãµes quando o app estÃ¡ em primeiro plano
class NotificationDelegate: NSObject, UNUserNotificationCenterDelegate {
    
    /// Mostra notificaÃ§Ãµes mesmo quando o app estÃ¡ em primeiro plano
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        
        print("ðŸ“¬ [NotificationDelegate] NotificaÃ§Ã£o recebida")
        print("   Title: \(notification.request.content.title)")
        print("   Body: \(notification.request.content.body)")
        print("   Identifier: \(notification.request.identifier)")
        
        // Verifica se o app estÃ¡ em primeiro plano
        let appState = UIApplication.shared.applicationState
        let isForeground = appState == .active
        
        if isForeground {
            print("   ðŸ“± App em primeiro plano - mostrando notificaÃ§Ã£o")
        } else {
            print("   ðŸ”’ App em background/bloqueado - iOS mostrarÃ¡ notificaÃ§Ã£o automaticamente")
        }
        
        // Mostra banner, som e badge mesmo em primeiro plano
        // Em background, o iOS mostra automaticamente, mas manter a configuraÃ§Ã£o garante que funcione
        if #available(iOS 14.0, *) {
            completionHandler([.banner, .sound, .badge])
        } else {
            completionHandler([.alert, .sound, .badge])
        }
    }
    
    /// Trata quando o usuÃ¡rio toca na notificaÃ§Ã£o
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        
        print("ðŸ‘† [NotificationDelegate] UsuÃ¡rio tocou na notificaÃ§Ã£o")
        print("   Identifier: \(response.notification.request.identifier)")
        print("   Action: \(response.actionIdentifier)")
        
        completionHandler()
    }
}

