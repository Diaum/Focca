import Foundation
import UserNotifications

/// Componente respons√°vel pelo agendamento de notifica√ß√µes
class NotificationScheduler {
    private let notificationCenter = UNUserNotificationCenter.current()
    
    /// Agenda uma notifica√ß√£o para um dia espec√≠fico da semana
    /// - Parameters:
    ///   - schedule: O schedule que vai come√ßar
    ///   - weekday: Dia da semana (1=Dom, 2=Seg, ..., 7=S√°b)
    func scheduleNotificationForWeekday(schedule: ScheduleModel, weekday: Int) {
        // Calcula o hor√°rio da notifica√ß√£o (10 minutos antes)
        let notificationTime = calculateNotificationTime(for: schedule.startTime)
        
        // Cria o conte√∫do da notifica√ß√£o
        let content = NotificationContent.createScheduleNotification(for: schedule)
        
        // Cria o trigger semanal
        let trigger = createWeeklyTrigger(hour: notificationTime.hour, minute: notificationTime.minute, weekday: weekday)
        
        // Identificador √∫nico: scheduleId + weekday
        let identifier = "schedule_\(schedule.id)_weekday_\(weekday)"
        
        // Cria e agenda a requisi√ß√£o
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)
        
        notificationCenter.add(request) { error in
            if let error = error {
                print("‚ùå [NotificationScheduler] Erro ao agendar: \(error.localizedDescription)")
                print("   Schedule ID: \(schedule.id)")
                print("   Weekday: \(weekday)")
                print("   Time: \(String(format: "%02d:%02d", notificationTime.hour, notificationTime.minute))")
            } else {
                let weekdayName = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][(weekday - 1) % 7]
                print("‚úÖ [NotificationScheduler] Agendada para \(weekdayName) √†s \(String(format: "%02d:%02d", notificationTime.hour, notificationTime.minute))")
                print("   Schedule ID: \(schedule.id)")
                print("   Schedule Mode: \(schedule.modeName)")
                print("   Trigger repeats: true")
                
                // Verifica se foi realmente agendada
                self.notificationCenter.getPendingNotificationRequests { requests in
                    let found = requests.contains { $0.identifier == identifier }
                    if found {
                        print("   ‚úÖ Confirmado: Notifica√ß√£o encontrada nas pendentes")
                    } else {
                        print("   ‚ö†Ô∏è AVISO: Notifica√ß√£o n√£o encontrada nas pendentes!")
                    }
                }
            }
        }
    }
    
    /// Calcula o hor√°rio da notifica√ß√£o (10 minutos antes do in√≠cio)
    /// - Parameter startTime: Hor√°rio de in√≠cio do schedule
    /// - Returns: Tupla com hora e minuto da notifica√ß√£o
    private func calculateNotificationTime(for startTime: Date) -> (hour: Int, minute: Int) {
        let calendar = Calendar.current
        let startComps = calendar.dateComponents([.hour, .minute], from: startTime)
        guard let startHour = startComps.hour, let startMin = startComps.minute else {
            return (9, 50) // Default: 09:50
        }
        
        // Calcula 10 minutos antes
        var notificationHour = startHour
        var notificationMinute = startMin - 10
        
        // Se o minuto for negativo, ajusta para o dia anterior (hora anterior)
        if notificationMinute < 0 {
            notificationHour = (startHour - 1 + 24) % 24
            notificationMinute = startMin + 50
        }
        
        return (notificationHour, notificationMinute)
    }
    
    /// Cria um trigger semanal que repete toda semana
    /// - Parameters:
    ///   - hour: Hora da notifica√ß√£o
    ///   - minute: Minuto da notifica√ß√£o
    ///   - weekday: Dia da semana (1=Dom, 2=Seg, ..., 7=S√°b)
    /// - Returns: Trigger configurado para repeti√ß√£o semanal
    private func createWeeklyTrigger(hour: Int, minute: Int, weekday: Int) -> UNCalendarNotificationTrigger {
        var triggerComps = DateComponents()
        triggerComps.weekday = weekday
        triggerComps.hour = hour
        triggerComps.minute = minute
        
        return UNCalendarNotificationTrigger(dateMatching: triggerComps, repeats: true)
    }
    
    /// Cancela todas as notifica√ß√µes de um schedule espec√≠fico
    func cancelNotifications(for scheduleId: String) {
        notificationCenter.getPendingNotificationRequests { requests in
            let identifiersToCancel = requests
                .filter { $0.identifier.hasPrefix("schedule_\(scheduleId)_weekday_") }
                .map { $0.identifier }
            
            if !identifiersToCancel.isEmpty {
                self.notificationCenter.removePendingNotificationRequests(withIdentifiers: identifiersToCancel)
                print("üóëÔ∏è [NotificationScheduler] Canceladas \(identifiersToCancel.count) notifica√ß√£o(√µes) para schedule '\(scheduleId)'")
            }
        }
    }
    
    /// Cancela todas as notifica√ß√µes pendentes
    func cancelAllNotifications() {
        notificationCenter.removeAllPendingNotificationRequests()
        print("üóëÔ∏è [NotificationScheduler] Todas as notifica√ß√µes foram canceladas")
    }
    
    /// Agenda notifica√ß√£o para HOJE se o schedule come√ßar hoje e estiver nos weekdays
    /// IMPORTANTE: S√≥ agenda se N√ÉO houver notifica√ß√£o semanal que j√° cobre hoje
    func scheduleNotificationForTodayIfNeeded(schedule: ScheduleModel) {
        let calendar = Calendar.current
        let now = Date()
        let todayWeekday = calendar.component(.weekday, from: now)
        
        // Verifica se hoje est√° nos dias do schedule
        guard schedule.weekdays.contains(todayWeekday) else {
            print("   ‚ÑπÔ∏è [NotificationScheduler] Hoje n√£o est√° nos dias do schedule")
            return
        }
        
        // Extrai hora/minuto do in√≠cio do schedule
        let startComps = calendar.dateComponents([.hour, .minute], from: schedule.startTime)
        guard let startHour = startComps.hour, let startMin = startComps.minute else {
            return
        }
        
        // Calcula o hor√°rio da notifica√ß√£o (10 minutos antes)
        let notificationTime = calculateNotificationTime(for: schedule.startTime)
        let notificationHour = notificationTime.hour
        let notificationMinute = notificationTime.minute
        
        // Verifica se j√° existe uma notifica√ß√£o semanal pendente para hoje com o mesmo hor√°rio
        notificationCenter.getPendingNotificationRequests { [weak self] requests in
            guard let self = self else { return }
            
            let weeklyNotificationId = "schedule_\(schedule.id)_weekday_\(todayWeekday)"
            let hasWeeklyNotification = requests.contains { req in
                if req.identifier == weeklyNotificationId {
                    // Verifica se o trigger semanal vai disparar hoje
                    if let calendarTrigger = req.trigger as? UNCalendarNotificationTrigger {
                        let triggerComps = calendarTrigger.dateComponents
                        // Se weekday, hour e minute coincidem, a notifica√ß√£o semanal j√° vai disparar hoje
                        if triggerComps.weekday == todayWeekday &&
                           triggerComps.hour == notificationHour &&
                           triggerComps.minute == notificationMinute {
                            print("   ‚ÑπÔ∏è [NotificationScheduler] Notifica√ß√£o semanal j√° cobre hoje, n√£o criando duplicata")
                            return true
                        }
                    }
                }
                return false
            }
            
            // Se j√° existe notifica√ß√£o semanal que cobre hoje, n√£o cria adicional
            if hasWeeklyNotification {
                print("   ‚ÑπÔ∏è [NotificationScheduler] Notifica√ß√£o semanal j√° agendada para hoje, pulando notifica√ß√£o espec√≠fica")
                return
            }
            
            // Cria a data de in√≠cio para hoje
            guard let scheduleStartToday = calendar.date(bySettingHour: startHour, minute: startMin, second: 0, of: now) else {
                return
            }
            
            // Calcula quantos minutos faltam at√© o in√≠cio
            let minutesUntilStart = scheduleStartToday.timeIntervalSince(now) / 60.0
            
            // Se j√° passou o hor√°rio hoje, n√£o agenda (espera a notifica√ß√£o semanal)
            if minutesUntilStart < 0 {
                print("   ‚ÑπÔ∏è [NotificationScheduler] Hor√°rio do schedule j√° passou hoje")
                return
            }
            
            print("   üìÖ [NotificationScheduler] Schedule come√ßa em \(Int(minutesUntilStart)) minutos hoje")
            
            // Se come√ßar em menos de 10 minutos, envia notifica√ß√£o IMEDIATA (mas s√≥ se n√£o houver semanal)
            if minutesUntilStart < 10 {
                print("   ‚ö° [NotificationScheduler] Schedule come√ßa em menos de 10 minutos! Enviando notifica√ß√£o IMEDIATA")
                self.sendImmediateNotificationForSchedule(schedule: schedule)
                return
            }
            
            // Verifica se o hor√°rio da notifica√ß√£o ainda n√£o passou hoje
            let notificationMinutes = Double(notificationHour * 60 + notificationMinute)
            let currentMinutes = Double(calendar.component(.hour, from: now) * 60 + calendar.component(.minute, from: now))
            
            if notificationMinutes > currentMinutes || (notificationHour == 0 && notificationMinute < 10) {
                // Cria trigger para hoje espec√≠fico
                var dateComps = calendar.dateComponents([.year, .month, .day], from: now)
                dateComps.hour = notificationHour
                dateComps.minute = notificationMinute
                dateComps.second = 0
                
                guard let notificationDate = calendar.date(from: dateComps) else {
                    return
                }
                
                // Se a data j√° passou, n√£o agenda
                if notificationDate <= now {
                    print("   ‚ÑπÔ∏è [NotificationScheduler] Hor√°rio da notifica√ß√£o j√° passou hoje")
                    return
                }
                
                let timeInterval = notificationDate.timeIntervalSince(now)
                
                // Cria conte√∫do da notifica√ß√£o
                let content = NotificationContent.createScheduleNotification(for: schedule)
                
                // Trigger para data espec√≠fica (n√£o repete, s√≥ hoje)
                let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)
                
                // Identificador √∫nico para hoje
                let identifier = "schedule_\(schedule.id)_today_\(calendar.startOfDay(for: now).timeIntervalSince1970)"
                
                let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)
                
                self.notificationCenter.add(request) { error in
                    if let error = error {
                        print("   ‚ùå [NotificationScheduler] Erro ao agendar notifica√ß√£o para hoje: \(error.localizedDescription)")
                    } else {
                        print("   ‚úÖ [NotificationScheduler] Notifica√ß√£o agendada para hoje √†s \(String(format: "%02d:%02d", notificationHour, notificationMinute))")
                        print("      Faltam \(Int(minutesUntilStart)) minutos para o schedule come√ßar")
                    }
                }
            } else {
                print("   ‚ÑπÔ∏è [NotificationScheduler] Hor√°rio da notifica√ß√£o j√° passou hoje, ser√° agendada para a pr√≥xima semana")
            }
        }
    }
    
    /// Envia notifica√ß√£o IMEDIATA para schedule que come√ßa em menos de 10 minutos
    private func sendImmediateNotificationForSchedule(schedule: ScheduleModel) {
        let content = NotificationContent.createScheduleNotification(for: schedule)
        
        // Trigger imediato (1 segundo)
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        
        // Identificador √∫nico
        let identifier = "schedule_\(schedule.id)_immediate_\(Date().timeIntervalSince1970)"
        
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)
        
        notificationCenter.add(request) { error in
            if let error = error {
                print("   ‚ùå [NotificationScheduler] Erro ao enviar notifica√ß√£o imediata: \(error.localizedDescription)")
            } else {
                print("   ‚úÖ [NotificationScheduler] Notifica√ß√£o IMEDIATA enviada para schedule '\(schedule.modeName)'")
            }
        }
    }
}

